// Generated by CoffeeScript 1.9.3

/*
 * * tiler
 * * https://github.com/brewster1134/tiler
 * *
 * * @version 2.0.2
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery', 'widget', 'effect'], function($) {
        return factory($);
      });
    } else {
      return factory(jQuery);
    }
  })(this, function($) {
    return $.widget('ui.tiler', {
      widgetEventPrefix: 'tiler',
      options: {
        activeTile: 1,
        isReversible: true
      },
      _init: function() {
        this.$tiles = $('.tiler-tile', this.element).not(this.element.find('.tiler-viewport .tiler-tile'));
        this.$currentActiveTile || (this.$currentActiveTile = this._getTile(this.options.activeTile));
        this.$currentPreviousTile || (this.$currentPreviousTile = this._getTile(this._getTileIndex(this.$currentActiveTile) + 1));
        this._setupTiles();
        return this._setupLinks();
      },
      refresh: function() {
        var ref;
        this._init();
        this.element.trigger('tiler.refresh');
        return (ref = this.$enterTile) != null ? ref.trigger('tiler.refresh') : void 0;
      },
      goTo: function(tileValue, animation) {
        var $enteringTile, $exitingTile;
        $enteringTile = this._getTile(tileValue);
        $exitingTile = this.$currentActiveTile;
        if (!$enteringTile.length || $enteringTile[0] === this.$currentActiveTile[0]) {
          return;
        }
        this._transitionCss($enteringTile, $exitingTile, animation);
        return $enteringTile;
      },
      _getTile: function(tileValue) {
        var $tile;
        $tile = (function() {
          switch (typeof tileValue) {
            case 'number':
              return this.$tiles.eq(tileValue - 1);
            case 'string':
              return $("#" + tileValue, this.element);
            default:
              return $(tileValue, this.element);
          }
        }).call(this);
        if ($tile.length) {
          return $tile;
        } else {
          return this.$tiles.eq(0);
        }
      },
      _getTileIndex: function($tile) {
        return this.$tiles.index($tile) + 1;
      },
      _getAnimationClass: function($tile) {
        return $tile.data('tiler-animation') || this.element.data('tiler-animation') || '';
      },
      _transitionCss: function($enteringTile, $exitingTile, animation) {
        var animationClass, positionClass, reverseClass;
        animationClass = typeof animation === 'string' ? animation : this._getAnimationClass($enteringTile);
        reverseClass = this.options.isReversible && this._getTileIndex($enteringTile) < this._getTileIndex(this.$currentActiveTile) ? 'reverse' : '';
        positionClass = animation === false ? 'end' : 'start';
        this.element.addClass('animation-disabled');
        $enteringTile.attr('class', "tiler-tile " + animationClass + " active enter " + reverseClass + " " + positionClass);
        $exitingTile.attr('class', "tiler-tile " + animationClass + " previous exit " + reverseClass + " " + positionClass);
        this.$tiles.not($enteringTile).not($exitingTile).attr('class', 'tiler-tile');
        if (animation === false) {
          return this._finalizeNewTiles($enteringTile, $exitingTile);
        } else {
          return setTimeout((function(_this) {
            return function() {
              _this.element.removeClass('animation-disabled');
              $enteringTile.add($exitingTile).switchClass('start', 'end');
              return _this._finalizeNewTiles($enteringTile, $exitingTile);
            };
          })(this), 10);
        }
      },
      _finalizeNewTiles: function($enterTile, $exitTile) {
        this.$currentActiveTile = $enterTile;
        this.$currentPreviousTile = $exitTile;
        this.element.attr('data-tiler-active-tile', this.$currentActiveTile.attr('id'));
        this.element.trigger('tiler.goto', {
          enterTile: $enterTile,
          exitTile: $exitTile
        });
        $enterTile.trigger('tiler.enter');
        return $exitTile.trigger('tiler.exit');
      },
      _setupTiles: function() {
        this.element.addClass('animation-disabled');
        this.$tiles.attr('data-tiler-viewport-id', this.element.attr('id'));
        this.$tiles.css({
          width: this.element.outerWidth(),
          height: this.element.outerHeight()
        });
        this.$currentActiveTile.add(this.$currentPreviousTile).addClass(this._getAnimationClass(this.$currentActiveTile));
        this.$currentActiveTile.addClass('active enter end');
        this.$currentPreviousTile.addClass('previous exit end');
        if (this.options.isReversible) {
          return this.$currentPreviousTile.addClass('reverse');
        }
      },
      _setupLinks: function() {
        return $('[data-tiler-link]').each(function() {
          var $tile, tileId, tileIds;
          tileIds = $(this).data('tiler-link').split(':').reverse();
          tileId = tileIds[0];
          $tile = tileIds[1] ? $(".tiler-tile#" + tileId, "#" + tileIds[1]) : $(".tiler-tile#" + tileId);
          if (!$tile.length) {
            return;
          }
          return $.extend($(this).data(), $tile.data());
        });
      }
    });
  });

}).call(this);

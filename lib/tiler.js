// Generated by CoffeeScript 1.9.3

/*
 * * tiler
 * * https://github.com/brewster1134/tiler
 * *
 * * @version 2.0.1
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery', 'widget', 'effect'], function($) {
        return factory($);
      });
    } else {
      return factory(jQuery);
    }
  })(this, function($) {
    return $.widget('ui.tiler', {
      widgetEventPrefix: 'tiler',
      options: {
        isReversible: true,
        startingActiveTile: 1,
        startingPreviousTile: 2
      },
      _create: function() {
        this.currentActiveTileIndex = this.options.startingActiveTile;
        return this.currentPreviousTileIndex = this.options.startingPreviousTile;
      },
      _init: function() {
        this.element.addClass('animation-disabled');
        this.$tiles = $('.tiler-tile', this.element).not(this.element.find('.tiler-viewport .tiler-tile'));
        this.$enterTile = this.$tiles.eq(this.currentActiveTileIndex - 1);
        this.$exitTile = this.$tiles.eq(this.currentPreviousTileIndex - 1);
        this._setupTiles();
        return this._setupLinks();
      },
      refresh: function() {
        var ref;
        this._init();
        this.element.trigger('tiler.refresh');
        return (ref = this.$enterTile) != null ? ref.trigger('tiler.refresh') : void 0;
      },
      _getTile: function(tileValue) {
        if (typeof tileValue === 'string') {
          return $("#" + tileValue, this.element);
        } else if (tileValue.jquery) {
          return tileValue.jquery;
        } else if (tileValue.nodeType) {
          return $(tileValue);
        } else {
          return this.$tiles.eq(tileValue - 1);
        }
      },
      goTo: function(tile, animation) {
        var enterTileIndex;
        this.$enterTile = this._getTile(tile);
        enterTileIndex = this.$tiles.index(this.$enterTile);
        this.$exitTile = this._getTile(this.currentActiveTileIndex + 1);
        if (!this.$enterTile.length || this.currentActiveTileIndex === enterTileIndex) {
          return;
        }
        this._transitionCss(this._getAnimationClass(), animation);
        this.element.trigger('tiler.goto', {
          enterTile: this.$enterTile,
          exitTile: this.$exitTile
        });
        this.$enterTile.trigger('tiler.enter');
        this.$exitTile.trigger('tiler.exit');
        this.currentActiveTileIndex = enterTileIndex;
        this.currentPreviousTileIndex = this.currentActiveTileIndex;
        this.element.attr('data-tiler-active-tile', this.$enterTile.attr('id'));
        return this.$enterTile;
      },
      _getAnimationClass: function() {
        return this.$enterTile.data('tiler-animation') || this.element.data('tiler-animation') || '';
      },
      _transitionCss: function(animationClass, animation) {
        var enterStartClass, enterTileIndex, exitStartClass, otherTileClass, position, reverseClass;
        if (typeof animation === 'string') {
          animationClass = animation;
        }
        position = animation === false ? 'end' : 'start';
        enterTileIndex = this.$tiles.index(this.$enterTile);
        reverseClass = this.options.isReversible && !this._isNavigatingForward(enterTileIndex) ? 'reverse' : '';
        this.element.addClass('animation-disabled');
        enterStartClass = "tiler-tile " + animationClass + " active enter " + reverseClass + " " + position;
        exitStartClass = "tiler-tile " + animationClass + " previous exit " + reverseClass + " " + position;
        otherTileClass = 'tiler-tile';
        this.$enterTile.attr('class', enterStartClass);
        this.$exitTile.attr('class', exitStartClass);
        this.$tiles.not(this.$enterTile).not(this.$exitTile).attr('class', otherTileClass);
        if (animation !== false) {
          return setTimeout((function(_this) {
            return function() {
              _this.element.removeClass('animation-disabled');
              return _this.$enterTile.add(_this.$exitTile).switchClass('start', 'end');
            };
          })(this), 10);
        }
      },
      _setupLinks: function() {
        return $('[data-tiler-link]').each(function() {
          var tile, tileId, tileIds;
          tileIds = $(this).data('tiler-link').split(':').reverse();
          tileId = tileIds[0];
          tile = tileIds[1] ? $(".tiler-tile#" + tileId, "#" + tileIds[1]) : $(".tiler-tile#" + tileId);
          if (!tile.length) {
            return;
          }
          return $.extend($(this).data(), tile.data());
        });
      },
      _setupTiles: function() {
        var self;
        self = this;
        this.$tiles.each(function() {
          $(this).attr('data-tiler-viewport-id', self.element.attr('id'));
          return $(this).addClass(self._getAnimationClass(true));
        });
        return this.element.add(this.$tiles).css({
          width: this.element.outerWidth(),
          height: this.element.outerHeight()
        });
      },
      _isNavigatingForward: function(enterTileIndex) {
        return enterTileIndex > this.currentActiveTileIndex;
      }
    });
  });

}).call(this);

// Generated by CoffeeScript 1.9.3

/*
 * * tiler
 * * https://github.com/brewster1134/tiler
 * *
 * * @version 1.0.4
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery', 'widget', 'effect'], function($) {
        return factory($);
      });
    } else {
      return factory(jQuery);
    }
  })(this, function($) {
    return $.widget('ui.tiler', {
      widgetEventPrefix: 'tiler',
      options: {
        reverseSupport: true
      },
      _create: function() {
        return this.$currentTileId = 0;
      },
      _init: function() {
        this.$tiles = $('.tiler-tile', this.element).not(this.element.find('.tiler-viewport .tiler-tile'));
        this._setupTiles();
        return this._setupLinks();
      },
      refresh: function() {
        var ref;
        this._init();
        this.element.trigger('tiler.refresh');
        return (ref = this.$enterTile) != null ? ref.trigger('tiler.refresh') : void 0;
      },
      goTo: function(tile, animation) {
        var $tile, tileId;
        if (animation == null) {
          animation = true;
        }
        $tile = typeof tile === 'string' ? this.$tiles.filter("#" + tile) : tile.jquery ? tile.jquery : tile.nodeType ? $(tile) : this.$tiles.eq(tile - 1);
        tileId = this.$tiles.index($tile) + 1;
        if (this.$currentTileId === tileId) {
          return;
        }
        this.$enterTile = $tile;
        this.$exitTile = this.$tiles.eq(Math.max(0, this.$currentTileId - 1));
        this.element.attr('data-tiler-active-tile', this.$enterTile.attr('id'));
        this._transitionCss(this._getAnimationClass(animation));
        this.element.trigger('tiler.goto', {
          enterTile: this.$enterTile,
          exitTile: this.$exitTile
        });
        this.$enterTile.trigger('tiler.enter');
        this.$exitTile.trigger('tiler.exit');
        this.$currentTileId = tileId;
        return this.$enterTile;
      },
      _getAnimationClass: function(animation) {
        if (typeof animation === 'string') {
          return animation;
        }
        if (animation) {
          return this.$enterTile.data('tiler-animation') || '';
        } else {
          return 'no-active-class';
        }
      },
      _transitionCss: function(animationClass) {
        var customReverse, enterTileFinalPosition, enterTileId, enterTileInitialPosition, enterTileInitialState, exitTileFinalPosition, exitTileInitialPosition, exitTileInitialState;
        enterTileId = this.$tiles.index(this.$enterTile, this.$exitTile) + 1;
        if (animationClass != null ? animationClass.indexOf('<' > 0) : void 0) {
          animationClass = this._isNavigatingForward(enterTileId) ? animationClass.replace('<', '') : animationClass.replace('<', ' reverse');
          customReverse = true;
        }
        if (this._isNavigatingForward(enterTileId) || !this.options.reverseSupport || !customReverse === true) {
          exitTileInitialState = 'exit';
          exitTileInitialPosition = 'start';
          exitTileFinalPosition = 'end';
          enterTileInitialState = 'enter';
          enterTileInitialPosition = 'start';
          enterTileFinalPosition = 'end active';
        } else {
          exitTileInitialState = 'enter';
          exitTileInitialPosition = 'end';
          exitTileFinalPosition = 'start';
          enterTileInitialState = 'exit';
          enterTileInitialPosition = 'end';
          enterTileFinalPosition = 'start active';
        }
        this.$exitTile.add(this.$enterTile).css({
          'transition-duration': '0 !important',
          '-o-transition-duration': '0 !important',
          '-moz-transition-duration': '0 !important',
          '-webkit-transition-duration': '0 !important'
        });
        this.$exitTile.attr('class', "tiler-tile " + exitTileInitialState + " " + exitTileInitialPosition + " " + animationClass);
        this.$enterTile.attr('class', "tiler-tile " + enterTileInitialState + " " + enterTileInitialPosition + " " + animationClass);
        this.$exitTile.add(this.$enterTile).css({
          'transition-duration': '',
          '-o-transition-duration': '',
          '-moz-transition-duration': '',
          '-webkit-transition-duration': ''
        });
        this.$exitTile.switchClass(exitTileInitialPosition, exitTileFinalPosition);
        return this.$enterTile.switchClass(enterTileInitialPosition, enterTileFinalPosition);
      },
      _setupLinks: function() {
        return $('[data-tiler-link]').each(function() {
          var tileData, tileId, tileInstance, tilerInstance;
          tileId = $(this).data('tiler-link').split(':');
          if (tileId.length === 2) {
            tilerInstance = $(".tiler-viewport#" + tileId[0]);
            tileInstance = $(".tiler-tile#" + tileId[1], tilerInstance);
          } else {
            tileInstance = $(".tiler-tile#" + tileId[0]);
          }
          if (!tileInstance.length) {
            return;
          }
          tileData = tileInstance.data();
          delete tileData['tilerTransition'];
          delete tileData['tilerTransitionDuration'];
          return $.extend($(this).data(), tileData);
        });
      },
      _setupTiles: function() {
        var height, maxHeight, maxWidth, self, width;
        self = this;
        maxWidth = [];
        maxHeight = [];
        this.$tiles.css({
          width: '',
          height: ''
        });
        this.$tiles.each(function() {
          maxWidth.push($(this).outerWidth());
          maxHeight.push($(this).outerHeight());
          return $(this).attr('data-tiler-viewport-id', self.element.attr('id'));
        });
        width = this.element.outerWidth() || Math.max.apply(Math, maxWidth);
        height = this.element.outerHeight() || Math.max.apply(Math, maxHeight) || width;
        return this.element.add(this.$tiles).css({
          width: width,
          height: height
        });
      },
      _isNavigatingForward: function(enterTileId) {
        return enterTileId > this.$currentTileId;
      }
    });
  });

}).call(this);

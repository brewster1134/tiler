// Generated by CoffeeScript 1.8.0

/*
 * * tiler
 * * https://github.com/brewster1134/tiler
 * *
 * * @version 0.2.3
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery', 'widget', 'effect'], function($) {
        return factory($);
      });
    } else {
      return factory(jQuery);
    }
  })(this, function($) {
    return $.widget('ui.tiler', {
      widgetEventPrefix: 'tiler',
      options: {
        reverseSupport: true
      },
      _create: function() {
        return this.$currentTileId = 0;
      },
      _init: function() {
        this.$tiles = $('.tiler-tile', this.element).not(this.element.find('.tiler-viewport .tiler-tile'));
        this._setupTiles();
        return this._setupLinks();
      },
      refresh: function() {
        this._init();
        this.element.trigger('tiler.refresh');
        return this.$enterTile.trigger('tiler.refresh');
      },
      goTo: function(idOrIndex, activeClass) {
        var $tile, enterTileClass, tileId;
        if (typeof idOrIndex === 'string') {
          $tile = this.$tiles.filter("#" + idOrIndex);
          tileId = this.$tiles.index($tile) + 1;
        } else {
          $tile = this.$tiles.eq(idOrIndex - 1);
          tileId = idOrIndex;
        }
        if (this.$currentTileId === tileId) {
          return;
        }
        this.$enterTile = $tile;
        this.$exitTile = this.$tiles.eq(Math.max(0, this.$currentTileId - 1));
        this.element.attr('data-tiler-active-tile', this.$enterTile.attr('id'));
        if (activeClass === false) {
          activeClass = 'no-active-class';
        }
        enterTileClass = activeClass || this.$enterTile.data('tiler-active-class') || '';
        this.$enterTile.css({
          display: 'block',
          zIndex: 2
        });
        this.$exitTile.css({
          display: 'block',
          zIndex: 1
        });
        this.$tiles.not(this.$enterTile).not(this.$exitTile).css({
          display: 'none',
          zIndex: -1
        });
        this._transitionCss(enterTileClass);
        this.element.trigger('tiler.goto', {
          enterTile: this.$enterTile,
          exitTile: this.$exitTile
        });
        this.$enterTile.trigger('tiler.enter');
        this.$exitTile.trigger('tiler.exit');
        this.$currentTileId = tileId;
        return this.$enterTile;
      },
      _transitionCss: function(enterTileClass) {
        var enterTileFinalPosition, enterTileId, enterTileInitialPosition, enterTileInitialState, exitTileFinalPosition, exitTileInitialPosition, exitTileInitialState;
        enterTileId = this.$tiles.index(this.$enterTile, this.$exitTile) + 1;
        if (!this.options.reverseSupport || this._isNavigatingForward(enterTileId)) {
          exitTileInitialState = 'exit';
          exitTileInitialPosition = 'start';
          exitTileFinalPosition = 'end';
          enterTileInitialState = 'enter';
          enterTileInitialPosition = 'start';
          enterTileFinalPosition = 'end';
        } else {
          exitTileInitialState = 'enter';
          exitTileInitialPosition = 'end';
          exitTileFinalPosition = 'start';
          enterTileInitialState = 'exit';
          enterTileInitialPosition = 'end';
          enterTileFinalPosition = 'start';
        }
        this.$exitTile.attr('class', "tiler-tile " + exitTileInitialState + " " + enterTileClass);
        this.$exitTile.data('tilerTransition', this.$exitTile.css('transition'));
        this.$exitTile.data('tilerTransitionDuration', this.$exitTile.css('transition-duration'));
        this.$exitTile.css('transition-duration', 0);
        this.$exitTile.addClass(exitTileInitialPosition);
        this.$exitTile.css({
          transition: this.$exitTile.data('tilerTransition'),
          'transition-duration': this.$exitTile.data('tilerTransitionDuration')
        });
        this.$exitTile.switchClass(exitTileInitialPosition, exitTileFinalPosition);
        this.$enterTile.attr('class', "tiler-tile " + enterTileInitialState + " " + enterTileClass);
        this.$enterTile.data('tilerTransition', this.$enterTile.css('transition'));
        this.$enterTile.data('tilerTransitionDuration', this.$enterTile.css('transition-duration'));
        this.$enterTile.css('transition-duration', 0);
        this.$enterTile.addClass(enterTileInitialPosition);
        this.$enterTile.css({
          transition: this.$enterTile.data('tilerTransition'),
          'transition-duration': this.$enterTile.data('tilerTransitionDuration')
        });
        this.$enterTile.addClass('active');
        return this.$enterTile.switchClass(enterTileInitialPosition, enterTileFinalPosition);
      },
      _setupLinks: function() {
        return $('[data-tiler-link]').each(function() {
          var tileData, tileId, tileInstance, tilerInstance;
          tileId = $(this).data('tiler-link').split(':');
          if (tileId.length === 2) {
            tilerInstance = $(".tiler-viewport#" + tileId[0]);
            tileInstance = $(".tiler-tile#" + tileId[1], tilerInstance);
          } else {
            tileInstance = $(".tiler-tile#" + tileId[0]);
          }
          if (!tileInstance.length) {
            return;
          }
          tileData = tileInstance.data();
          delete tileData['tilerTransition'];
          delete tileData['tilerTransitionDuration'];
          return $.extend($(this).data(), tileData);
        });
      },
      _setupTiles: function() {
        var self;
        self = this;
        this.$tiles.each(function() {
          return $(this).attr('data-tiler-viewport-id', self.element.attr('id'));
        });
        return this.$tiles.css({
          width: this.element.outerWidth(),
          height: this.element.outerHeight()
        });
      },
      _isNavigatingForward: function(enterTileId) {
        return enterTileId > this.$currentTileId;
      }
    });
  });

}).call(this);
